package com.playmonumenta.plugins.bosses.bosses;

import com.playmonumenta.plugins.bosses.BossBarManager;
import com.playmonumenta.plugins.bosses.BossBarManager.BossHealthAction;
import com.playmonumenta.plugins.bosses.SpellManager;
import com.playmonumenta.plugins.bosses.spells.Spell;
import com.playmonumenta.plugins.bosses.spells.SpellAxtalMeleeMinions;
import com.playmonumenta.plugins.bosses.spells.SpellAxtalTntThrow;
import com.playmonumenta.plugins.bosses.spells.SpellAxtalWitherAoe;
import com.playmonumenta.plugins.bosses.spells.SpellBaseLaser;
import com.playmonumenta.plugins.bosses.spells.SpellBlockBreak;
import com.playmonumenta.plugins.bosses.spells.SpellConditionalTeleport;
import com.playmonumenta.plugins.bosses.spells.SpellTpBehindPlayer;
import com.playmonumenta.plugins.events.DamageEvent;
import com.playmonumenta.plugins.particle.PartialParticle;
import com.playmonumenta.plugins.utils.BossUtils;
import com.playmonumenta.plugins.utils.DamageUtils;
import com.playmonumenta.plugins.utils.EntityUtils;
import com.playmonumenta.plugins.utils.LocationUtils;
import com.playmonumenta.plugins.utils.MessagingUtils;
import com.playmonumenta.plugins.utils.PlayerUtils;
import com.playmonumenta.plugins.utils.PotionUtils;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Particle;
import org.bukkit.Sound;
import org.bukkit.SoundCategory;
import org.bukkit.World;
import org.bukkit.attribute.Attribute;
import org.bukkit.boss.BarColor;
import org.bukkit.boss.BarStyle;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.plugin.Plugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitRunnable;
import org.jetbrains.annotations.Nullable;

public class CAxtal extends SerializedLocationBossAbilityGroup {
	public static final String identityTag = "boss_caxtal";
	public static final int detectionRange = 110;

	private double mCoefficient = 1.0;

	public CAxtal(Plugin plugin, LivingEntity boss, Location spawnLoc, Location endLoc) {
		super(plugin, identityTag, boss, spawnLoc, endLoc);
		mBoss.setRemoveWhenFarAway(false);

		mBoss.addScoreboardTag("Boss");

		SpellManager activeSpells = new SpellManager(Arrays.asList(
			new SpellAxtalWitherAoe(plugin, mBoss, 13, 0, 30),
			new SpellAxtalMeleeMinions(plugin, mBoss, 10, 3, 3, 20, 12, "Soul", false),
			new SpellTpBehindPlayer(plugin, mBoss, 160, 80, 50, 10, true),
			new SpellAxtalTntThrow(plugin, mBoss, 5, 15),
			new SpellBaseLaser(plugin, boss, 60, 140, false, true, 160,
				// Tick action per player
				(LivingEntity target, int ticks, boolean blocked) -> {
					World world = boss.getWorld();
					if (ticks % 8 == 0) {
						world.playSound(target.getLocation(), Sound.UI_TOAST_IN, SoundCategory.HOSTILE, 2, 0.5f + (ticks / 100f) * 1.5f);
					} else if (ticks % 8 == 2) {
						world.playSound(boss.getLocation(), Sound.UI_TOAST_IN, SoundCategory.HOSTILE, 2, 0.5f + (ticks / 100f) * 1.5f);
					} else if (ticks % 8 == 4) {
						world.playSound(target.getLocation(), Sound.ENTITY_WITHER_SPAWN, SoundCategory.HOSTILE, 2, 0.5f + (ticks / 100f) * 1.5f);
					} else if (ticks % 8 == 6) {
						world.playSound(boss.getLocation(), Sound.UI_TOAST_IN, SoundCategory.HOSTILE, 2, 0.5f + (ticks / 100f) * 1.5f);
					}
				},
				// Particles generated by the laser
				(Location loc) -> {
					new PartialParticle(Particle.SMOKE_NORMAL, loc, 1, 0.02, 0.02, 0.02, 0).spawnAsEntityActive(boss);
					new PartialParticle(Particle.SMOKE_LARGE, loc, 1, 0.02, 0.02, 0.02, 0).spawnAsEntityActive(boss);
					new PartialParticle(Particle.SPELL_MOB, loc, 1, 0.02, 0.02, 0.02, 1).spawnAsEntityActive(boss);
				},
				// TNT generated at the end of the attack
				(LivingEntity player, Location loc, boolean blocked) -> {
					double r = 15;
					int maxDmg = 60;
					for (Player p : PlayerUtils.playersInRange(loc, r, true)) {
						if (p.getLocation().distance(loc) <= r && (LocationUtils.hasLineOfSight(p.getLocation(), loc) || LocationUtils.hasLineOfSight(p.getEyeLocation(), loc))) {
							double dist = p.getLocation().distance(loc);
							DamageUtils.damage(mBoss, p, DamageEvent.DamageType.MAGIC, maxDmg * (1 - dist / r), null, false, true, "Corruption Blast");
							PotionUtils.applyPotion(com.playmonumenta.plugins.Plugin.getInstance(), p, new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 2, 10));
						}
					}
					loc.getWorld().createExplosion(loc, 7, false, true, mBoss);
				})
		));
		List<Spell> passiveSpells = Arrays.asList(
			new SpellBlockBreak(mBoss),
			// Teleport the boss to spawnLoc if he gets too far away from where he spawned
			new SpellConditionalTeleport(mBoss, spawnLoc, b -> spawnLoc.distance(b.getLocation()) > 80),
			// Teleport the boss to spawnLoc if he is stuck in bedrock
			new SpellConditionalTeleport(mBoss, spawnLoc, b -> b.getLocation().getBlock().getType() == Material.BEDROCK ||
				                                                   b.getLocation().add(0, 1, 0).getBlock().getType() == Material.BEDROCK ||
				                                                   b.getLocation().getBlock().getType() == Material.LAVA)
		);

		Map<Integer, BossHealthAction> events = new HashMap<>();
		events.put(100, mBoss -> PlayerUtils.nearbyPlayersAudience(spawnLoc, detectionRange)
			.sendMessage(Component.text("At last, the keys are collected. I can be free finally...", NamedTextColor.DARK_RED)));
		events.put(50, (mBoss) -> PlayerUtils.nearbyPlayersAudience(spawnLoc, detectionRange)
			.sendMessage(Component.text("PLEASE. KILL ME. KAUL HOLDS ONTO MY MIND, BUT I YEARN FOR FREEDOM.", NamedTextColor.DARK_RED)));
		events.put(25, (mBoss) -> PlayerUtils.nearbyPlayersAudience(spawnLoc, detectionRange)
			.sendMessage(Component.text("YOU ARE CLOSE. END THIS. END THE REVERIE!", NamedTextColor.DARK_RED)));
		events.put(10, (mBoss) -> PlayerUtils.nearbyPlayersAudience(spawnLoc, detectionRange)
			.sendMessage(Component.text("My servant is nearly dead. You dare to impose your will on the jungle?", NamedTextColor.DARK_GREEN)));
		BossBarManager bossBar = new BossBarManager(plugin, boss, detectionRange, BarColor.RED, BarStyle.SEGMENTED_10, events);

		super.constructBoss(activeSpells, passiveSpells, detectionRange, bossBar);

		new BukkitRunnable() {

			@Override
			public void run() {
				if (mBoss.isDead() || !mBoss.isValid()) {
					this.cancel();
				}
				int playerCount = BossUtils.getPlayersInRangeForHealthScaling(mBoss, detectionRange);
				mCoefficient = BossUtils.healthScalingCoef(playerCount, 0.5, 0.5);
			}
		}.runTaskTimer(mPlugin, 0, 100);
	}

	@Override
	public void onHurt(DamageEvent event) {
		event.setDamage(event.getDamage() / mCoefficient);
	}

	@Override
	public void init() {
		int hpDelta = 1024;
		int playerCount = BossUtils.getPlayersInRangeForHealthScaling(mBoss, detectionRange);
		mCoefficient = BossUtils.healthScalingCoef(playerCount, 0.5, 0.5);
		EntityUtils.setAttributeBase(mBoss, Attribute.GENERIC_MAX_HEALTH, hpDelta);
		mBoss.setHealth(hpDelta);

		//launch event related spawn commands
		for (Player player : PlayerUtils.playersInRange(mBoss.getLocation(), detectionRange, true)) {
			MessagingUtils.sendBoldTitle(player, Component.text("C'Axtal", NamedTextColor.DARK_RED), Component.text("The Soulspeaker", NamedTextColor.RED));
			player.playSound(player.getLocation(), Sound.ENTITY_WITHER_SPAWN, SoundCategory.HOSTILE, 10, 0.7f);
			player.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS, 40, 2, true, false, false));
		}
	}

	@Override
	public void death(@Nullable EntityDeathEvent event) {
		List<Player> players = PlayerUtils.playersInRange(mBoss.getLocation(), detectionRange, true);

		BossUtils.endBossFightEffects(players);
		for (Player player : players) {
			player.playSound(player.getLocation(), Sound.ENTITY_ENDER_DRAGON_DEATH, SoundCategory.HOSTILE, 10.0f, 0.8f);
			player.sendMessage(Component.text("It ends at last... Is this what freedom feels like?..", NamedTextColor.DARK_RED));
		}
		mEndLoc.getBlock().setType(Material.REDSTONE_BLOCK);
	}
}
